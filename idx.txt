Step 3: Add django-webpack-loader
Back to step 2

Unfortunately, in this step a lot of stuff will happen all at once. This is the step where most people give up, because Webpack is one monster of a tool and super hard to understand and to configure.

Let's try to walk through this step by step.

First of all we need to run pip install django-webpack-loader and of course we will also add it to requirements.txt. Tip: Whenever you install something with pip, run pip freeze immediately after and copy and paste that package with it's version number into your requirements.txt.

Next we need to add this reusable Django app to the INSTALLED_APPS setting in our settings.py:


PS1='\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\λ '

export
PS1="\[\033[1;34m\]\!\[\033[0m\] \[\033[1;35m\]\u\[\033[0m\]:\[\033[1;35m\]\W\[\033[0m\] λ  "

export PS1='\[\e[1;32m\][\u@\h \W]\$\[\e[0m\] '

PROMPT_COMMAND='PS1="\[\033[0;33m\][\!]\`if [[ \$? = "0" ]]; then echo "\\[\\033[32m\\]"; else echo "\\[\\033[31m\\]"; fi


